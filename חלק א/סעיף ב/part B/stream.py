import pandas as pd
from collections import defaultdict
import time


hourly_data = defaultdict(list)



def update_hourly_average(timestamp, value):

    hour = timestamp.replace(minute=0, second=0, microsecond=0)


    hourly_data[hour].append(value)


    hourly_avg = sum(hourly_data[hour]) / len(hourly_data[hour])


    print(f"Time: {hour}, Average: {hourly_avg}")



def simulate_streaming_data():

    example_data = [
        ("2025-06-10 6:10:00", 15.3),
        ("2025-06-10 6:45:00", 5.3),
        ("2025-06-10 7:30:00", 12),
        ("2025-06-10 7:30:00", 10),

    ]

    for timestamp_str, value in example_data:

        timestamp = pd.to_datetime(timestamp_str)


        update_hourly_average(timestamp, value)


        time.sleep(1)



simulate_streaming_data()


#תשובה לשאלה בסעיף אם הנתונים מגיעים בזרימה
#במקרה שבו הנתונים מגיעים בזרימה (stream) ולא מקובץ, יש צורך לעבד את הנתונים באופן רציף, כלומר לעדכן את הממוצעים השעתיים בזמן אמת. כדי להתמודד עם כך, נצטרך להשתמש בטכניקות של עיבוד נתונים בזמן אמת. להלן הדרך בה ניתן ליישם פתרון כזה:
#1. איסוף נתונים בזרימה:
#במקום לקרוא קובץ CSV, הנתונים יגיעו באופן רציף, למשל ממערכת סינגל, API, או מסד נתונים בזמן אמת.

#כל רשומה מכילה את חותמת הזמן (timestamp) והערך (value), כאשר כל רשומה נשלחת או נקלטת ברציפות.

#2. שמור נתונים בזמן אמת:
#אנחנו נרצה לשמור את הנתונים תוך שמירה על חישוב הממוצע השעתי.
#את הנתונים נוכל לאחסן בזמן אמת במבנה נתונים (כמו deque או pandas DataFrame), וכך נוכל לעדכן את הממוצע בכל רגע נתון.

#3. חישוב ממוצע שעתיים תוך עדכון רציף:
#נרצה לעדכן את הממוצע השעתי ברגע שחותמת הזמן (timestamp) משתנה.
#כדי לחשב את הממוצע השעתי בזמן אמת, נוכל להשתמש במבנה נתונים שמאפשר לנו לעקוב אחר הערכים של כל שעה (כמו מילון או קובץ זמני).
#4. תכנון הפתרון:
#שלב 1: שמירת נתונים בזמן אמת
#נשמור את הנתונים שזמינים לנו בזרימה, ונעדכן את הממוצע השעתי עבור כל שעה.
#שלב 2: עדכון הממוצעים
#כאשר מגיע נתון חדש, נעדכן את הממוצע של השעה הנוכחית (אם זו אותה שעה), אחרת ניצור שעה חדשה ונחשב ממוצע חדש.
#שלב 3: ניהול ותיעוד הממוצעים
#נשמור את הממוצעים בנפרד, ונתעד את הזמן והערך הממוצע. נוכל לשלוח את הממוצעים החדשים לאחר כל עדכון.
#והקוד לדוגמא למעלה
